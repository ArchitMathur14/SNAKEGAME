# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18XaKBJa4rXwqTv0UGW8vVsLODpUGNgJQ
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

# Make sure you have the CSV file 'game_info.csv' in the same directory.
# If not, you can load it from a different path.
@st.cache_data
def load_and_clean_data():
    """
    Loads, cleans, and processes the game data.
    This function is cached to prevent reloading the data on every interaction.
    """
    df_am12_bb20_rj43 = pd.read_csv('game_info.csv')

    df_am12_bb20_rj43_dropped = df_am12_bb20_rj43.drop([
        'slug', 'tba', 'updated', 'playtime', 'website', 'suggestions_count',
        'game_series_count', 'achievements_count', 'added_status_yet',
        'added_status_owned', 'added_status_beaten', 'added_status_toplay',
        'added_status_dropped', 'added_status_playing'
    ], axis=1)

    df_cleaned = df_am12_bb20_rj43_dropped.dropna()

    # Feature Engineering
    df_cleaned['released'] = pd.to_datetime(df_cleaned['released'], errors='coerce')
    df_cleaned['release_year'] = df_cleaned['released'].dt.year.fillna(0).astype(int)
    df_cleaned['game_age'] = 2025 - df_cleaned['release_year']
    df_cleaned.loc[df_cleaned['release_year'] == 0, 'game_age'] = np.nan

    metacritic_bins = [0, 50, 80, 100]
    metacritic_labels = ['low', 'medium', 'high']
    df_cleaned['metacritic_category'] = pd.cut(
        df_cleaned['metacritic'], bins=metacritic_bins, labels=metacritic_labels, right=False
    )

    ratings_bins = [0, 2, 4, 5.1]
    ratings_labels = ['low', 'medium', 'high']
    df_cleaned['ratings_category'] = pd.cut(
        df_cleaned['rating'], bins=ratings_bins, labels=ratings_labels, right=False
    )

    df_cleaned['genre_count'] = df_cleaned['genres'].str.split('\|\|').str.len()
    df_cleaned['genre_count_category'] = df_cleaned['genre_count'].apply(
        lambda x: 'single' if x == 1 else 'multiple'
    )

    return df_cleaned

# Load the processed data
df = load_and_clean_data()

# --- STREAMLIT DASHBOARD LAYOUT ---
st.set_page_config(layout="wide")
st.title("🎮 Game Publication and Ratings Dashboard")
st.markdown("An interactive dashboard to explore trends in the video game industry.")

# Sidebar for filters or controls
st.sidebar.header("Dashboard Filters")
min_year = int(df['release_year'].min())
max_year = int(df['release_year'].max())
selected_year_range = st.sidebar.slider(
    'Select a Year Range',
    min_value=min_year,
    max_value=max_year,
    value=(min_year, max_year)
)

filtered_df = df[
    (df['release_year'] >= selected_year_range[0]) &
    (df['release_year'] <= selected_year_range[1])
]

# --- Main Content Sections ---

## 1. Top Games and Critic/Audience Ratings
st.header("Metacritic vs. Audience Ratings")
st.markdown("Compare games by their critic (Metacritic) and audience (Rating) scores.")

col1, col2 = st.columns(2)

with col1:
    st.subheader("Highest-Rated Games")
    highest_metacritic = filtered_df.loc[filtered_df['metacritic'].idxmax()][['name', 'metacritic', 'release_year', 'publishers']]
    highest_rating = filtered_df.loc[filtered_df['rating'].idxmax()][['name', 'rating', 'release_year', 'publishers']]

    st.markdown("**Highest Metacritic Score**")
    st.dataframe(highest_metacritic.to_frame().T, use_container_width=True)

    st.markdown("**Highest Audience Rating**")
    st.dataframe(highest_rating.to_frame().T, use_container_width=True)

with col2:
    st.subheader("Games Loved by Both Critics and Audiences")
    loved_games = filtered_df[
        (filtered_df['metacritic_category'] == 'high') &
        (filtered_df['ratings_category'] == 'high')
    ][['name', 'metacritic', 'rating']].sort_values(by='metacritic', ascending=False)

    if not loved_games.empty:
        st.dataframe(loved_games, use_container_width=True)
    else:
        st.warning("No games found in this category for the selected year range.")

## 2. Publication Trends Over Time
st.header("Publication and Rating Trends")

tab1, tab2 = st.tabs(["Games Published Per Year", "Average Ratings Over Years"])

with tab1:
    st.markdown("### Number of Games Published Each Year")
    games_per_year = filtered_df['release_year'].value_counts().sort_index()
    games_per_year = games_per_year[games_per_year.index != 0]

    if not games_per_year.empty:
        fig_yearly = px.line(
            x=games_per_year.index,
            y=games_per_year.values,
            title='Number of Games Published Each Year',
            labels={'x': 'Year', 'y': 'Number of Games'}
        )
        st.plotly_chart(fig_yearly, use_container_width=True)
    else:
        st.warning("No game data available for the selected year range.")

with tab2:
    st.markdown("### Average Metacritic and Audience Ratings Over the Years")
    avg_ratings_over_time = filtered_df.groupby('release_year').agg(
        avg_metacritic=('metacritic', 'mean'),
        avg_rating=('rating', 'mean')
    ).reset_index()

    fig_avg_ratings = px.line(
        avg_ratings_over_time,
        x='release_year',
        y=['avg_metacritic', 'avg_rating'],
        title='Average Metacritic and Audience Ratings Over Time',
        labels={'release_year': 'Year', 'value': 'Average Score', 'variable': 'Metric'}
    )
    st.plotly_chart(fig_avg_ratings, use_container_width=True)


## 3. Top Publishers
st.header("Top Publishers by Game Count")
st.markdown("Analyze which publishers have released the most games.")

col3, col4 = st.columns([1, 2])

with col3:
    st.subheader("Top 10 Publishers")
    publisher_counts = filtered_df['publishers'].value_counts()
    top_publishers = publisher_counts.head(10)
    st.dataframe(top_publishers, use_container_width=True)

with col4:
    st.subheader("Games per Publisher Chart")
    if not top_publishers.empty:
        fig_publishers = px.bar(
            top_publishers,
            x=top_publishers.index,
            y=top_publishers.values,
            title='Top 10 Publishers by Number of Games',
            labels={'x': 'Publisher', 'y': 'Number of Games'}
        )
        fig_publishers.update_layout(xaxis={'categoryorder':'total descending'})
        st.plotly_chart(fig_publishers, use_container_width=True)
    else:
        st.warning("No publisher data available for the selected year range.")