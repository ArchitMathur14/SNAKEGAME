# -*- coding: utf-8 -*-
"""am12_bb20_rj43.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/ArchitMathur14/SNAKEGAME/blob/main/am12_bb20_rj43.ipynb
"""

!pip install streamlit
!pip install pyngrok

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import streamlit as st
from datetime import datetime

#Loading the dataset
df_am12_bb20_rj43 = pd.read_csv('game_info.csv')

print("Shape of dataset:", df_am12_bb20_rj43.shape)
print("Columns:", df_am12_bb20_rj43.columns.tolist())
print("\nFirst 5 rows:")
print(df_am12_bb20_rj43.head())

df_am12_bb20_rj43_dropped = df_am12_bb20_rj43.drop(['slug', 'tba', 'updated', 'playtime', 'website', 'suggestions_count', 'game_series_count', 'achievements_count', 'added_status_yet', 'added_status_owned', 'added_status_beaten', 'added_status_toplay', 'added_status_dropped','added_status_playing'], axis=1)
print("Shape of dataset after dropping columns:", df_am12_bb20_rj43_dropped.shape)

df_am12_bb20_rj43_dropped.head()

# Check for null values in each column
null_counts = df_am12_bb20_rj43_dropped.isnull().sum()
print("Null values per column:")
print(null_counts)

# Drop rows with any null values
df_am12_bb20_rj43_cleaned = df_am12_bb20_rj43_dropped.dropna()

print("\nShape of dataset after dropping nulls:", df_am12_bb20_rj43_cleaned.shape)
df_am12_bb20_rj43_cleaned.head()

# 1. Create 'release_year' column
# Convert 'released' to datetime objects, coercing errors to NaT
df_am12_bb20_rj43_cleaned['released'] = pd.to_datetime(df_am12_bb20_rj43_cleaned['released'], errors='coerce')

# Extract the year, handle potential NaT values by filling with 0
df_am12_bb20_rj43_cleaned['release_year'] = df_am12_bb20_rj43_cleaned['released'].dt.year.fillna(0).astype(int)

# 2. Create 'game_age' column
# Assuming the current year is 2025 for calculating game age
df_am12_bb20_rj43_cleaned['game_age'] = 2025 - df_am12_bb20_rj43_cleaned['release_year']

# Handle cases where release_year was 0 (due to NaT in 'released')
df_am12_bb20_rj43_cleaned.loc[df_am12_bb20_rj43_cleaned['release_year'] == 0, 'game_age'] = np.nan

print("DataFrame with 'release_year' and 'game_age':")
display(df_am12_bb20_rj43_cleaned[['released', 'release_year', 'game_age']].head())

# 3. Create 'metacritic_category' column
# Define bins and labels for metacritic scores
metacritic_bins = [0, 50, 80, 100]
metacritic_labels = ['low', 'medium', 'high']

df_am12_bb20_rj43_cleaned['metacritic_category'] = pd.cut(df_am12_bb20_rj43_cleaned['metacritic'], bins=metacritic_bins, labels=metacritic_labels, right=False)

print("\nDataFrame with 'metacritic_category':")
display(df_am12_bb20_rj43_cleaned[['metacritic', 'metacritic_category']].head())

# 4. Create 'ratings_category' column
# Define bins and labels for ratings (assuming rating is on a scale of 0-5)
ratings_bins = [0, 2, 4, 5.1] # Adding a small value to include 5.0
ratings_labels = ['low', 'medium', 'high']

df_am12_bb20_rj43_cleaned['ratings_category'] = pd.cut(df_am12_bb20_rj43_cleaned['rating'], bins=ratings_bins, labels=ratings_labels, right=False)

print("\nDataFrame with 'ratings_category':")
display(df_am12_bb20_rj43_cleaned[['rating', 'ratings_category']].head())

# 5. Create 'genre_count' column
# Split the 'genres' string by '||' and count the number of genres
df_am12_bb20_rj43_cleaned['genre_count'] = df_am12_bb20_rj43_cleaned['genres'].str.split('\|\|').str.len()

# Create buckets for single and multiple genres
df_am12_bb20_rj43_cleaned['genre_count_category'] = df_am12_bb20_rj43_cleaned['genre_count'].apply(lambda x: 'single' if x == 1 else 'multiple')

print("\nDataFrame with 'genre_count' and 'genre_count_category':")
display(df_am12_bb20_rj43_cleaned[['genres', 'genre_count', 'genre_count_category']].head())

df_am12_bb20_rj43_cleaned.head()

categorical_cols = df_am12_bb20_rj43_cleaned.select_dtypes(include=['object', 'category']).columns.tolist()
non_categorical_cols = df_am12_bb20_rj43_cleaned.select_dtypes(exclude=['object', 'category']).columns.tolist()

print("Categorical variables:")
print(categorical_cols)

print("\nNon-categorical variables:")
print(non_categorical_cols)

"""#Queries regarding dataframe

Query 1: Which is the most highly rated game of all time according to this file?
"""

# Find the game with the highest metacritic score
df_am12_bb20_rj43_highest_metacritic_game = df_am12_bb20_rj43_cleaned.loc[df_am12_bb20_rj43_cleaned['metacritic'].idxmax()]

print("Game with the highest Metacritic score:")
display(df_am12_bb20_rj43_highest_metacritic_game[['name', 'metacritic','release_year','publishers']])

# Find the game with the highest rating
df_am12_bb20_rj43_highest_rating_game = df_am12_bb20_rj43_cleaned.loc[df_am12_bb20_rj43_cleaned['rating'].idxmax()]

print("\nGame with the highest rating:")
display(df_am12_bb20_rj43_highest_rating_game[['name', 'rating','release_year','publishers']])

"""Query 2: List all games that the critics and audiences loved alike."""

# Filter for games with high metacritic_category and high ratings_category
df_am12_bb20_rj43_loved_games = df_am12_bb20_rj43_cleaned[(df_am12_bb20_rj43_cleaned['metacritic_category'] == 'high') & (df_am12_bb20_rj43_cleaned['ratings_category'] == 'high')]

# Display the names of these games
print("Games loved by both critics and audiences:")
display(df_am12_bb20_rj43_loved_games[['name','metacritic','rating']])

# Select a subset of games for visualization (e.g., top 10 by metacritic score)
top_games_metacritic = df_am12_bb20_rj43_cleaned.nlargest(10, 'metacritic')

# Create a bar graph comparing metacritic and rating
fig, ax = plt.subplots(figsize=(12, 6))

bar_width = 0.35
index = np.arange(len(top_games_metacritic))

bar1 = ax.bar(index, top_games_metacritic['metacritic'], bar_width, label='Metacritic Score', color='skyblue')
bar2 = ax.bar(index + bar_width, top_games_metacritic['rating'] * 20, bar_width, label='Rating (Scaled to 100)', color='lightcoral') # Scale rating to compare with metacritic

ax.set_xlabel('Game Name')
ax.set_ylabel('Score')
ax.set_title('Metacritic Score vs. Rating for Top Games by Metacritic')
ax.set_xticks(index + bar_width / 2)
ax.set_xticklabels(top_games_metacritic['name'], rotation=90)
ax.legend()

plt.tight_layout()
plt.show()

"""Query 3: Publishers with the highest number of games published over the years."""

# Count the number of games per publisher
df_am12_bb20_rj43_publisher_counts = df_am12_bb20_rj43_cleaned['publishers'].value_counts()

# Display the top publishers
print("Publishers with the highest number of games published:")
display(df_am12_bb20_rj43_publisher_counts.head(10)) # Displaying the top 10 publishers

import matplotlib.pyplot as plt
import seaborn as sns

# Get the top N publishers (e.g., top 10)
top_n = 10
top_publishers = df_am12_bb20_rj43_publisher_counts.head(top_n)

# Create a bar chart
plt.figure(figsize=(12, 6))
sns.barplot(x=top_publishers.index, y=top_publishers.values, palette='viridis')
plt.title(f'Top {top_n} Publishers by Number of Games Published')
plt.xlabel('Publisher')
plt.ylabel('Number of Games')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""Query 4: Number of games published every year."""

# Count the number of games published each year
games_per_year = df_am12_bb20_rj43_cleaned['release_year'].value_counts().sort_index()

# Filter out the year 0, which represents missing release dates
games_per_year = games_per_year[games_per_year.index != 0]

# Display the count of games published each year
print("Number of games published every year:")
display(games_per_year)

# Create a line plot
plt.figure(figsize=(12, 6))
sns.lineplot(x=games_per_year.index, y=games_per_year.values)
plt.title('Number of Games Published Each Year')
plt.xlabel('Year')
plt.ylabel('Number of Games')
plt.grid(True)
plt.show()

"""Query 5: Average Metacritic and Audience ratings over the years"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import plotly.graph_objects as go
# 
# st.title('Metacritic Score vs. Rating Comparison')
# 
# # Assuming df_am12_bb20_rj43_cleaned is available in the environment
# # Select a subset of games for visualization (e.g., top 10 by metacritic score)
# top_games_metacritic = df_am12_bb20_rj43_cleaned.nlargest(10, 'metacritic')
# 
# # Create a bar chart using Plotly
# fig = go.Figure(data=[
#     go.Bar(name='Metacritic Score', x=top_games_metacritic['name'], y=top_games_metacritic['metacritic'], marker_color='skyblue'),
#     go.Bar(name='Rating (Scaled to 100)', x=top_games_metacritic['name'], y=top_games_metacritic['rating'] * 20, marker_color='lightcoral')
# ])
# 
# # Change the layout to have bars side-by-side
# fig.update_layout(barmode='group', xaxis_tickangle=-45)
# 
# st.plotly_chart(fig, use_container_width=True)

